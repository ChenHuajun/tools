#!/bin/bash

set -eux

# exit early if a custom build is not needed
if [ -z "${USE_CUSTOM_PG:-}" ]; then
  exit
fi

# in order for other PostgreSQL packages to operate correctly, we need
# to ensure our build uses the same directories as the PGDG build; un-
# fortunately, not all can be specified by ./configure, so we apply the
# version-specific packaging patch used for the PGDG builds
pkgingurl='https://anonscm.debian.org/git/pkg-postgresql/postgresql.git'
patchurl="${pkgingurl}/plain/debian/patches/50-per-version-dirs.patch"

# clone PostgreSQL
cd ~
git clone -b "REL${PGVERSION//./_}_STABLE" --depth 1 git://git.postgresql.org/git/postgresql.git

# we will use this to parallelize PostgreSQL compilation
procs="$(nproc)"
mjobs="$((procs + 1))"

# configure, apply patch, build, and install PostgreSQL
cd postgresql
curl -sf "${patchurl}?h=${PGVERSION}" | git apply

./configure --enable-cassert --enable-debug --with-openssl \
    --mandir="/usr/share/postgresql/${PGVERSION}/man" \
    --docdir="/usr/share/doc/postgresql-doc-${PGVERSION}" \
    --sysconfdir=/etc/postgresql-common \
    --datarootdir=/usr/share/ \
    --datadir="/usr/share/postgresql/${PGVERSION}" \
    --bindir="/usr/lib/postgresql/${PGVERSION}/bin" \
    --libdir=/usr/lib/x86_64-linux-gnu/ \
    --libexecdir=/usr/lib/postgresql/ \
    --includedir=/usr/include/postgresql/ \

make -j "${mjobs}" -s all
make -j "${mjobs}" -s -C src/test/isolation
sudo make install

# install postgresql-common to get psql wrappers, etc.
sudo apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install postgresql-common
